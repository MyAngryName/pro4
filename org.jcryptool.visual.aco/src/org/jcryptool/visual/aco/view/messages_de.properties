Func_allSteps=Alle Schritte hintereinander
Func_alpha=Alpha:
Func_analyseCreated=Neuen Analysetext erstellen
Func_analyseGiven=Vorhandenen Text verwenden
Func_analysis=Geheimtexteingabe
Func_animation=Animation
Func_antAnalysis=Ameisen-Steuerung
Func_analysisType=Detailstufe
Func_beta=Beta:
Func_cycle=Bis zum letzten Knoten
Func_doWithNewAnt=Neue Ameisen losschicken
Func_encryption=Geheimtexterzeugung
Func_possibleInputs=Texteingabeart
Func_textLanguage=Sprache des Textes
Func_error=Fehler bei der Ausführung des Tutorials\!
Func_evap=Verdunstung:
Func_initial_plaintext=Ein guter Klartext
Func_keyLength=Vermutete Schlüssellänge
Func_newAnt=Neue Ameise platzieren
Func_permutation=Permutation:
Func_ciphertext=Geheimtext direkt eingeben
Func_general=Allgemein
Func_keytext=Schlüssel:
Func_oneStep=Knoten für Knoten
Func_proceed=Weiter
Func_proceedToAnalysis=Analyse starten
Func_stopAnalysis=Analyse stoppen
Func_reset=Zurücksetzen
Func_analyseConfiguration=Konfiguration
Func_analyseGroupLabel=Analyse
Func_step=Zum nächsten Knoten
Func_settings=Algorithmus-Einstellungen
Info_description1=In dieser Visualisierung wird die Kryptoanalyse von einfachen Transpositions-Verschlüsselungen (Permutations-Chiffren) mit Hilfe eines Ameisen-Algorithmus veranschaulicht.  \n\nDafür wird zunächst die Verschlüsselung des Klartextes mit einer Permutationschiffre dargestellt. Hierbei wird der Klartext in eine Matrix geschrieben. Die Schlüssellänge gibt die Anzahl der Spalten der Matrix an. Ist die letzte Zeile nicht vollständig (weil die Textlänge kein Vielfaches der Schlüssellänge ist) werden die restlichen Spalten darin mit zufälligen Zeichen aufgefüllt. \n\n Den Geheimtext erhält man, indem man entsprechend der Permutation die Spalten nacheinander ausliest. Indem man den Permutationsschlüssel ändert, kann man das Ergebnis der Verschlüsselung variieren. \n\n Um die Analyse auch graphisch darstellen lassen zu können, muss eine Schlüssellänge von 3 - 5 gewählt werden.
Info_description2=Nun geht es weiter mit der Kryptoanalyse mit Hilfe des Ameisen-Algorithmus. \n\n Anhand der Schlüssellänge werden zunächst die Spalten der Verschlüsselungsmatrix rekonstruiert und hieraus ein Graph erstellt, wobei jeder Knoten einer Spalte entspricht. \n\nDie Schlüssellänge lässt sich relativ leicht mit statistischen Tests ermitteln, wohingegen die Rekombination der so erhaltenen Spalten den komplizierten Teil der Kryptoanalyse darstellt. Hier setzt der Ameisen-Algorithmus an. Als erstes wird eine Ameise zufällig auf einen der Knoten des Graphen gesetzt.
Info_description3=Jeder Weg durch den Graphen, der alle Knoten genau einmal enthält, stellt einen möglichen Schlüssel für die Entschlüsselung dar, indem in der Reihenfolge wie die Knoten passiert wurden die Spalten wieder zu einer Matrix zusammengefügt werden und der Text zeilenweise ausgelesen wird.\n\nDie Wahrscheinlichkeit, mit der die Ameise zu einem der noch verbliebenen Knoten geht, hängt von zwei Maßen ab.\n\nDie Bigramme, die durch die Konkatenationen der Spalten enstehen werden dem Vorkommen von den Bigrammen der ausgewählten Sprache verglichen. Wenn sich die Ameise beispielsweise bei einer mit einem Q beginnenden Spalte befindet, bekommt eine Spalte, die mit einem U beginnt, eine höhere Bewertung als eine, die mit einem X beginnt, da die Kombination QU deutlich häufiger vorkommt als QX.\n\nDarüber hinaus sind allen Kanten im Graphen Werte zugeordnet, die verändert werden nachdem eine Ameise alle Knoten passiert hat. Aufgrund der Analogie zu echten Ameisen spricht man in diesem Zusammenhängen von Pheromonwerten.\nMit den Schiebereglern Alpha (Pheromon) und Beta (Bigramme) können die Einflüsse der beiden Maße auf die Wegwahl der Ameise verändert werden.\n\n
Info_description4=Sobald die Ameise ihren Weg durch den Graphen vollendet hat, wird die erhaltene Lösung bewertet. Hierfür wird der erhaltene Text mit einer Wortliste bestehend aus häufigen deutschen Wörtern mit mindestens drei Buchstaben verglichen. Von den gefundenen Wörtern werden die Wortlängen quadriert, aufaddiert und durch die Länge des Textes geteilt.\nDer so erhaltene Wert wird zu den Werten der Pheromonmatrix, die den Kanten des Weges, den die Ameise genommen hat, entsprechen, addiert. Darüber hinaus erfolgt eine Reduktion aller Werte. Dieses entspricht im natürlichen Vorbild der Verdunstung des Pheromons. Auch hierfür ist ein Schieberegler vorhanden um die Auswirkungen dieses Parameters zu verdeutlichen. Um zu sehen, wie sich die Pheromonmatrix weiter verändert, können nun weitere Ameisen auf ihre Reise geschickt werden.
Show_decryptedBestKnown=Beste bisherige Entschlüsselung:
Show_decryptedByAnt1=Anzahl losgeschickter Ameisen:
Show_encryptedText=Verschlüsselter Text:
Show_encryptionKey=Der gefundene Schlüssel ist für die Entschlüsselung\!\nDer entsprechende Verschlüsselungsschlüssel lautet:
Show_permutationMatrix=Permutationsmatrix
Show_pheromoneMatrix=Pheromonmatrix
Show_wrongInputTextSize=Die Textlänge muss ein vielfaches der Schlüssellänge sein. 
Description_title=Bedienung
Description_tooltip=Nähere Informationen
Func_radioCompleteRound=Mehrere Durchläufe
Control_language1=Deutsch
Control_language2 = Englisch
Control_language_own = Wortliste aus Datei laden
Control_language1_short = de
Control_language2_short = en
Control_generateText = Geheimtext erzeugen
Analysis_multipleCycles = Anzahl an Ameisen
Visual_graphVisualRadio = Visualisierung als Graph
Visual_matrixVisualRadio = Pheromonmatrix anzeigen
Header_title = Ameisenkolonie-Optimierung (ACO)
Header_text = Diese Visualisierung zeigt, wie ein mit dem Transpositionsverfahren verschlüsselter Text entschlüsselt werden kann, ohne den Schlüssel zu kennen. Anschaulich betrachtet wird zum Entschlüsseln ein Graph erzeugt: Die Anzahl der Knoten entspricht der Schlüssellänge des Verfahrens. Die Zeichen des Geheimtextes werden dann auf die Knoten des Graphen verteilt. Ein Knoten des Graphen wird zufällig ausgewählt, als besucht markiert, und die Übergangswahrscheinlichkeiten zu den bisher unbesuchten Knoten werden anhand "lokaler Informationen" berechnet. Basierend auf den Übergangswahrscheinlichkeiten wird dann ein bisher unbesuchter Knoten ausgewählt und die Iteration beginnt von vorne, bis alle Knoten besucht sind. Dadurch entsteht ein Pfad im Graphen. Durch Aneinanderreihen der Zeichen entlang des gefundenen Pfades im Graphen entsteht ein möglicher Klartext. In jedem Durchlauf entsteht ein Kandidat für einen Klartext. Werden viele Durchläufe durchgeführt, sollte der ursprüngliche Klartext die höchste Wahrscheinlichkeit haben. In die "lokalen Informationen" zur Berechnung der Übergangswahrscheinlichkeiten fließen auch Informationen über vorher gewählte Pfade ein. Daher spricht man in Analogie zu der Orientierung von Ameisen von der Ameisenkolonie-Optimierung.  
Control_or=oder
Control_textLength=Geheimtextlänge: 
Control_wrongInputToolTip=Es sind nur Großbuchstaben von A-Z erlaubt. \nKeine Sonderzeichen und keine Leerzeichen! \nKleinbuchstaben werden automatisch konvertiert.
Viusal_ResultGroup = Ergebnis
Visual_GraphMatrixGroupTitle = Visualisierung
Viusal_CurrAntGroup = Aktuelle Entschlüsselung
Result_currEncryptionLbl = Klartext der aktuellen Ameise
Result_bestEncryptionLbl = Bester gefundener Klartext insgesamt
Viusal_BestAntGroup = Beste Entschlüsselung
Result_emptyText1 = In dieser Komponente wird später
Result_emptyText2 = das Ergebnis des Algorithmus angezeigt.
PherMatrix_knotContent = Zeichen in den Knoten
Result_currTrailLbl = Schlüssel zur Entschlüsselung
Analysis_newAntButtonToolTip = Die neue Ameise kann jetzt wieder mit \n\u201EBis zum letzten Knoten\u201D oder \u201EZum nächsten Knoten\u201D losgeschickt werden. 
graph_probHintLbl = Die Prozentzahlen an den einzelnen Ziel-Knoten des Graphens stellen die \nÜbergangswahrscheinlichkeiten vom aktuell besuchten Knoten zum entsprechenden Zielknoten dar.
PherMatrix_description = Die Einträge der Pheromonmatrix repräsentieren Kantenbewertungen, \njeder Eintrag entspricht genau dem Gewicht einer Kante im Graph.
Result_description = Der mögliche Klartext setzt sich wieder durch Auslesen der Zeichen \nin den Knoten des Graphens zusammen. Ausgelesen wird entlang \ndes Pfades, den die Ameise genommen hat. \n\nDer Pfad entspricht dem Schlüssel zur Entschlüsselung, jede Zahlen \nsteht für den entsprechenden Knoten im Graph.
Desc_configComp_left = Im ersten Schritt muss zunächst ein Geheimtext zur Analyse gewählt werden.\nDieser kann direkt eingegeben oder mit dem Wizard \u201EGeheimtext erzeugen\u201D\naus einem Klartext erzeugt werden. \n\n \u2022 Vermutete Schlüssellänge n  [n \u2208 \u2115; 3 \u2264 n \u2264 9]:\n    \u2012 Die Länge des Schlüssels, der bei der Verschlüsselung benutzt wurde. \n    \u2012 Entspricht der Anzahl der Knoten im Analysegraphen.
Desc_configComp_right = \u2022 Sprache des Textes:\n    \u2012 Bei der Analyse werden Buchstabenbigramme mit den Häufigkeiten, mit denen\n       sie in der gewählten Sprache vorkommen, verglichen. Die Auswahlbox legt die\n       Sprache fest.\n\n\u2022 Analyse starten:\n    \u2012 Der Button wird aktiv, sobald die Geheimtextlänge größer oder gleich der\n       vermuteten Schlüssellänge ist.
Desc_analysisComp_left = \u2022 Knoten für Knoten [aktiv für Schlüssellängen n: 3 \u2264 n \u2264 5]:\n    \u2012 Der Weg einer Ameise im Graphen kann Knoten für Knoten beobachtet werden.\n\n\u2022 Mehrere Durchläufe [automatisch aktiv für Schlüssellängen n: 6 \u2264 n \u2264 9]:\n    \u2012 Es können mehrere Ameisen gleichzeitig losgeschickt werden.\n\n\u2022 Animation [aktiv für Schlüssellängen n: 3 \u2264 n \u2264 5]:\n    \u2012 Aktiviert Animationen.
Desc_analysisComp_right = \u2022 Zum nächsten Knoten:\n    \u2012 Der Pfad der Ameise wird zufällig um einen weiteren Knoten erweitert.\n\n\u2022 Bis zum letzten Knoten:\n    \u2012 Die Ameise setzt ihren Weg durch den Graphen fort, bis jeder Knoten\n       besucht ist.\n\n\u2022 Neue Ameise platzieren [aktiv, sobald eine Ameise ihren Pfad beendet hat]:\n    \u2012 Eine Ameise wird auf einen neuen Knoten gesetzt und ein neuer Pfad\n       (neue Entschlüsselung) wird angefangen.
Desc_analysisCompMulti_right = \u2022 Neue Ameisen losschicken:\n    \u2012 Startet einen neuen Durchlauf mit der festgelegten Anzahl an Ameisen.\n\n\u2022 Anzahl an Ameisen:\n    \u2012 Legt die Anzahl an Ameisen fest, die mit einem Mal losgeschickt werden.
Desc_analysisAlgoSett_left = In der Gruppe Algorithmus-Einstellungen können Parameter des Algorithmus\nfestgelegt werden. Diese verändern die Übergangswahrscheinlichkeiten von\nKnoten zu Knoten und damit unter anderem  die Konvergenz des Verfahrens.\n\n  \u2022 Alpha  [x \u2208 [0,1]]:\n   \u2012  Bei jedem Durchlauf hinterlässt die Ameise an jeder besuchten Kante ein\n       Pheromon.\n       Nachfolgende Ameisen richten sich nach dem Pheromon, sie wählen Kanten\n       mit höherem Pheromonwert eher aus. Der Wert Alpha regelt, wieviel Einfluss\n       die Pheromone auf die Ameise haben.  
Desc_analysisAlgoSett_right =  \u2022 Beta  [x \u2208 [0,1]]:\n   \u2012  Dieser Parameter regelt die Gewichtung von den Wahrscheinlichkeiten der\n       Buchstabenbigramme, die entlang der Kante entstehen. Ist der Parameter\n       hoch eingestellt, geht die Ameise eher einen Weg, bei dem die\n       Buchstabenbigramme in der ausgewählten Sprache wahrscheinlicher sind.\n\n \u2022 Verdunstung  [x \u2208 [0,1]]:\n   \u2012  Eine niedriger Verdunstungparameter bedeutet, dass Ameisen, die weit\n       später folgen das Pheromon der aktuellen Ameise noch lange wahrnehmen\n       werden.
Control_noVisualAvailable = Bis Schlüssellängen der Größe 5 kann das Verfahren in einem Graphen visualisiert werden.\nFür längere Schlüssel kann dann nur noch die Pheromonmatrix angezeigt werden.
