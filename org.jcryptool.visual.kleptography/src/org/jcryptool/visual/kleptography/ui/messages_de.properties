KleptoView_Keygen=Schlüsselgenerierung und Verschlüsselung
KleptoView_FixedP=Angriff auf festem P
KleptoView_SETUP=SETUP-Angriff
OverwriteDialog_Already_Saved_Two=Sie haben schon zwei öffentliche Schlüssel und Geheimtexte gespeichert.\nWählen Sie ein Paar zum überschreiben oder brechen Sie ab.
OverwriteDialog_Cancel=Abbrechen
OverwriteDialog_First_Set=Erstes Paar
OverwriteDialog_Overwrite_Saved_Data=Gespeicherte Daten überschreiben
OverwriteDialog_Second_Set=Zweites Paar
RSAAttackView_Fixed_Back=Zurück zur Schlüsselerzeugung und Verschlüsselung
RSAAttackView_Fixed_Calc_Private=Private Schlüssel berechnen
RSAAttackView_Fixed_Calculations=Rechnungen
RSAAttackView_Fixed_Calculations_Desc=Diese Werte können leicht berechnet werden, wenn bekannt ist, dass die Moduli einen gemeinsamen Teiler haben. So kann auch ein Beobachter ohne Zusatzinformationen den privaten Schlüssel berechnen. Die Primzahl P wird gemeinsam bei beiden Schlüsseln benutzt, aber Q und D nicht.
RSAAttackView_Fixed_Ciphertext1=Erster Geheimtext
RSAAttackView_Fixed_Ciphertext2=Zweiter Geheimtext
RSAAttackView_Fixed_Ciphertexts=Geheimtext
RSAAttackView_Fixed_Ciphertexts_Desc=Geheimtexte werden öffentlich übermittelt und sind deswegen für einen Angreifer oder anderen Beobachter sichtbar.
RSAAttackView_Fixed_D1=D (privater Exponent) des ersten Schlüssels
RSAAttackView_Fixed_D2=D (privater Exponent) des zweiten Schlüssels
RSAAttackView_Fixed_Decrypt_Cipher=Geheimtexte entschlüsseln
RSAAttackView_Fixed_Decrypted=Entschlüsselte Texte
RSAAttackView_Fixed_Decrypted_Desc=Die Klartexte können von einem Angreifer rückgewonnen werden, nachdem er die Geheimtexte mit dem nachgebildeten Schlüsseln entschlüsselt.
RSAAttackView_Fixed_Decrypted1=Erster entschlüsselter Text
RSAAttackView_Fixed_Decrypted2=Zweiter entschlüsselter Text
RSAAttackView_Fixed_E1=E (Öffentlicher Exponent) des ersten Schlüssels
RSAAttackView_Fixed_E2=E (Öffentlicher Exponent) des zweiten Schlüssels
RSAAttackView_Fixed_FactoredP=Faktorisierte Primzahl P
RSAAttackView_Fixed_Find_GCD=GgT der Moduli berechnen
RSAAttackView_Fixed_N1=N (Modul) des ersten Schlüssels
RSAAttackView_Fixed_N2=N (Modul) des zweiten Schlüssels
RSAAttackView_Fixed_Public_Desc=Öffentliche Schlüssel sind definitionsgemäß öffentlich verfügbar und deswegen für einen Angreifer bekannt. Diese Schlüssel wurden vom ersten Tab übernommen. Für einen Angriff benötigt der Angreifer zwei verschiedene Schlüssel mit entsprechenden Geheimtexten.
RSAAttackView_Fixed_Public_Keys=Öffentliche Schlüssel
RSAAttackView_Fixed_Q1=Q (Primzahl) des ersten Schlüssels
RSAAttackView_Fixed_Q2=Q (Primzahl) des zweiten Schlüssels
RSAAttackView_Fixed_Step9=Schritt 9: Der ggT der zwei gespeicherten Moduli wird berechnet. Da eine der Primzahlen während der Erzeugung der Schlüssel fest bleibt, wird dieser Wert als ggT wieder erscheinen.
RSAAttackView_Fixed_Step10=Schritt 10: Mithilfe der jetzt bekannten Primzahl P kann man die Werte der beiden Q-Primzahlen durch einfache Teilung von beiden N-Moduli durch P finden. Mit den beiden zu jedem N-Modul entsprechenden Primzahlpaaren kann man die privaten Exponenten D wie in dem Gerät bilden.
RSAAttackView_Fixed_Step11=Schritt 11: Man kann jetzt die Geheimtexte mit den entsprechenden nachgebildeten privaten Exponenten entschlüsseln, ohne die privaten Schlüsseln direkt erhalten zu haben.
RSAAttackView_Fixed_Title=Ausnutzung eines festen P
RSAAttackView_Gen_Desc=Das Ziel eines Angreifers ist es, mit öffentlich verfügbaren Daten, d.h. öffentliche Schlüssel und Geheimtexte, an Informationen zu gelangen, die zur Faktorisierung des Moduls N und zur Kenntnis des privaten Exponenten D  führen.
RSAAttackView_Identical_N_Text=Die gespeicherten N-Module sind gleich und können deswegen nicht faktorisiert werden.\nBitte speichern Sie einen anderen öffentlichen Schlüssel und Geheimtext.
RSAAttackView_Identical_N_Title=Identischer Modul N
RSAAttackView_SETUP_Additional_Data=Zusätzliche Daten
RSAAttackView_SETUP_Additional_Desc=Das verschlüsselte P wird von den oberen Bits des öffentlichen Moduls N gelesen, und um sie zu entschlüsseln braucht der Angreifer seinen eigenen privaten Schlüssel.
RSAAttackView_SETUP_AttackersD=D des Angreifers (privater Exponent)
RSAAttackView_SETUP_Back=Zurück zur Schlüsselerzeugung und Verschlüsselung
RSAAttackView_SETUP_Calc_Private=Private Schlüssel berechnen
RSAAttackView_SETUP_Calculations=Berechnungen
RSAAttackView_SETUP_Calculations_Desc=Der Angreifer wird die mit seinem öffentlichen Schlüssel verschlüsselte Primzahl P in den oberen Bits des Moduls N finden. Wegen einer möglichen Bitübertragung in der Teilung im Primzahlerzeugungs-Algorithmus muss der Angreifer auch P' berechnen, indem er den Wert des verschlüsselten P plus eins entschlüsselt. Der Angreifer kann P nutzen, um Q und dann D zu berechnen, aber muss auch P' nutzen, um Q' und D' zu berechnen.
RSAAttackView_SETUP_Ciphertext_Desc=Der Geheimtext wird öffentlich übermittelt und ist folglich komplett sichtbar für einen Angreifer oder anderen Beobachter.
RSAAttackView_SETUP_Ciphertext_Group=Geheimtext
RSAAttackView_SETUP_D1=D (privater Exponent)
RSAAttackView_SETUP_D2=D' (privater Exponent)
RSAAttackView_SETUP_Decrypt_Cipher=Geheimtexte entschlüsseln
RSAAttackView_SETUP_Decrypted1=Mit D entschlüsselter Geheimtext
RSAAttackView_SETUP_Decrypted2=Mit D' entschlüsselter Geheimtext
RSAAttackView_SETUP_Decryption_Desc=Der Angreifer kann den Klartext durch Entschlüsselung mit einem nachgebildeten privaten Schlüssel erlangen. Aber er kann nicht wissen, ob D oder D' der richtige private Exponent ist, und muss deswegen beide benutzen.
RSAAttackView_SETUP_Decryptions=Entschlüsselte Texte
RSAAttackView_SETUP_DecryptP=Verschlüsselte P entschlüsseln
RSAAttackView_SETUP_E=E (öffentlicher Exponent)
RSAAttackView_SETUP_EncryptedP=Verschlüsselte P
RSAAttackView_SETUP_N=N (Modul)
RSAAttackView_SETUP_P1=Entschlüsselte P
RSAAttackView_SETUP_P2=Entschlüsselte P' (P + 1)
RSAAttackView_SETUP_Public_Desc=Der öffentliche Schlüssel ist definitionsgemäß öffentlich verfügbar und folglich sichtbar für einen Angreifer. Dieser Schlüssel wurde direkt aus dem ersten Tab übernommen.
RSAAttackView_SETUP_Public_Keys=öffentlicher Schlüssel
RSAAttackView_SETUP_Q1=Q = N / entschlüsselte P
RSAAttackView_SETUP_Q2=Q' = N / entschlüsselte P'
RSAAttackView_SETUP_Step7=Schritt 7: Die verschlüsselte Primzahl P wird von den oberen Bits des Moduls N entnommen. Entschlüsselung dieses Wertes mit dem privaten Schlüssel des Angreifers ergibt die Primzahl P, es sei denn, ein Übertragungsbit wurde in der früheren Teilung genommen. Da der Angreifer nicht wissen kann, ob das passiert ist, muss er das verschlüsselte P und P plus eins (= P') entschlüsseln.
RSAAttackView_SETUP_Step8=Schritt 8: Mithilfe von P und P' sowie dem öffentlichen Schlüssel kann der Angreifer die zweite Primzahl Q und danach den privaten Schlüssel nachbilden. Der Angreifer muss Q und Q' berechnen, obwohl nur eine Primzahl ergeben wird, die N ohne Rest teilt.
RSAAttackView_SETUP_Step9=Schritt 9: Es gibt jetzt zwei mögliche Schlüssel, mit dem man den Geheimtext entschlüsseln kann. Der Angreifer könnte schon vorab prüfen, welcher Wert der Richtige ist, aber einer wird immer die ursprüngliche Klartext-Nachricht und der andere Unsinn ergeben.
RSAAttackView_SETUP_Title=Durchführung des SETUP-Angriffs
RSAAttackView_Title=Die Perspektive des Angreifers
RSAKeyView_Additional_Values=Zusätzliche Kryptosystemwerte
RSAKeyView_AttackerE=E des Angreifers
RSAKeyView_AttackerN=N des Angreifers
RSAKeyView_Binary=Binär
RSAKeyView_Bit_Length=Bitlänge der Schlüssel:
RSAKeyView_Bit_Length_Divisibility=Die Bitlänge der Schlüssel muss durch zwei teilbar sein, da die Primzahlen P und Q genau die Hälfte dieser Länge sein müssen.
RSAKeyView_Bit_Length_Generic_Error=Es gab einen Fehler bei der Eingabe der Schlüssellänge.
RSAKeyView_Bit_Length_Input_Error_Title=Bitlängeeingabefehler
RSAKeyView_Bit_Length_Minimum=Die Schlüssellänge muss mindestens 8 Bit sein. Kleinere Werte können nicht richtig entschlüsseln, weil die meisten ASCII-Werte größer als der Modul N wären.
RSAKeyView_Bit_Length_SETUP_Divisibility=Der SETUP-Angriff erfordert eine Bitlänge der Schlüssel, die teilbar durch 4 ist,\nweil die Primzahlen des Angreifers genau die Hälfte der Länge der Primzahlen des Kryptosystems haben muss,\ndie selbst genau die Hälfte der Länge der Schlüssellange haben muss.
RSAKeyView_Bit_Length_SETUP_Minimum=Der SETUP-Angriff benötigt eine Schlüssellänge von mindestens 20 Bit.\nKleinere Werte ergeben einen zu kleinen Schlüsselraum, mit dem der Angreifer effektiven Schlüssel erzeugen kann.
RSAKeyView_CalcD=D berechnen
RSAKeyView_CalcN=N berechnen
RSAKeyView_Ciphertext=Verschlüsselte Nachricht (Geheimtext)
RSAKeyView_Cryptosystem_Values=Standard-Kryptosystemwerte
RSAKeyView_D=D (privater Exponent)
RSAKeyView_Decimal=Dezimal
RSAKeyView_Decrypt=Entschlüsseln
RSAKeyView_Decrypted=Entschlüsselter Geheimtext (Klartext)
RSAKeyView_E=E (öffentlicher Exponent)
RSAKeyView_Encrypt=Verschlüsseln
RSAKeyView_EncryptedP=Verschlüsselte P
RSAKeyView_Fixed_Step1=Schritt 1: In diesem Angriff wird das kryptografische Gerät kompromittiert, wobei eine der Primzahlen fest gewählt wird. Das erste Mal, dass die Primzahlen in dem Gerät erzeugt werden, werden sie nicht manipuliert (zufällig) erzeugt, aber danach wird P festgehalten und nur Q zufällig erzeugt.
RSAKeyView_Fixed_Step2=Schritt 2: P mal Q ergibt den Modul N.
RSAKeyView_Fixed_Step3=Schritt 3: Phi wird berechnet, der öffentliche Exponent E wird gewählt, und der private Exponent D wird berechnet, indem die multiplikative Inverse von E bezüglich Phi gefunden wird. E und N bilden den öffentlichen Schlüssel, und D und N bilden den privaten Schlüssel.
RSAKeyView_Fixed_Step4=Schritt 4: Geben Sie eine Nachricht unten ein und verschlüsseln Sie sie mit dem öffentlichen Schlüssel.
RSAKeyView_Fixed_Step5=Schritt 5: Als Angreifer kann man alle öffentlich übermittelten Schlüssel und Geheimtexte sehen. Speichern Sie jetzt den aktuellen öffentlichen Schlüssel und Geheimtext.
RSAKeyView_Fixed_Step6=Schritt 6: Um diesen Angriff durchzuführen, benötigen Sie einen zweiten öffentlichen Schlüssel. Erzeugen Sie ein neues Schlüsselpaar. Dabei können Sie sehen, dass die Primzahl P sich nicht ändert, obwohl die andere Werte sich doch ändern.
RSAKeyView_Fixed_Step7=Schritt 7: Geben Sie eine Nachricht ein und verschlüsseln Sie sie mit dem zweiten öffentlichen Schlüssel.
RSAKeyView_Fixed_Step8=Schritt 8: Speichern Sie den zweiten öffentlichen Schlüssel und Geheimtext, um den Angriff durchführen zu können.
RSAKeyView_Fixed_Title=Betrügerische Schlüsselerzeugung mit RSA: feste Primzahl P
RSAKeyView_FixedP=Angriff 1: Nutzung eines festen P
RSAKeyView_Gen_Attacker_Keys=Neue Schlüssel für den Angreifer erzeugen
RSAKeyView_Gen_Desc=Kleptographie ist ein Verfahren, mit dem man Informationen sicher und verdeckt stehlen kann, indem man eine asymmetrische Hintertür in ein kryptografisches System einbaut. Beispielsweise kann man in einem RSA-Kryptosystem verschlüsselte Daten durch einen verdeckten Kanal durchsickern lassen, mit denen man dann den RSA-Modul leicht zerlegen kann. Wenn der Angriff in einem Black-Box-Gerät richtig durchgeführt wird, ist die Ausgabe nicht von der Ausgabe eines nicht manipulierten Geräts zu unterscheiden. Auch wenn das Gerät per Reverse Engineering offengelegt wird, könnte man zwar den Angriff bemerken, aber die durchgesickerten Daten sowie der private Schlüssel des Angreifers werden nicht aufgedeckt. Diese Beispiel-Implementierung nutzt RSA und enthält vier verschiedene "böswillige" Verfahren zur Schlüsselerzeugung, die ein Angreifer nutzen könnte, um ein Gerät zu kompromittieren. Dieses Thema zeigt, wie wichtig die Nutzung von echten zufülligen Schlüsseln ist.
RSAKeyView_Gen_New_Seed=Neuen Startwert erzeugen
RSAKeyView_Gen_Primes=Primzahlen P und Q erzeugen
RSAKeyView_GenAll=Alles auf einmal erzeugen
RSAKeyView_GenE=Neues E erzeugen
RSAKeyView_Hex=Hexadezimal
RSAKeyView_Honest=Nicht manipulierte (zufällige) Primzahlen erzeugen
RSAKeyView_Honest_Step1=Schritt 1: Zwei zufällige verschiedene Primzahlen (P und Q) werden erzeugt. Diese Primzahlen haben die halbe Bitlänge wie die Schlüssel.
RSAKeyView_Honest_Step2=Schritt 2: P mal Q ergibt das Modul N.
RSAKeyView_Honest_Step3=Schritt 3: Wählen Sie einen öffentliche Exponent E und dann wird der private Exponent D berechnet. Erstens muss Phi berechnet werden, wobei Phi(P*Q) = (P-1)*(Q-1) nach dem erweiterten euklidischen Algorithmus. E muss teilerfremd zu Phi sein und 1 <= E <= Phi - 1. Der Standardwert ist 2^16+1, aber man kann auch einen eigenen Wert nutzen oder einen zufällig erzeugen lassen. Der private Exponent D wird dann durch Rechnung der multiplikativen Inverse zu E mod Phi berechnet. E und N bilden den öffentlichen Schlüssel, und D und N bilden den privaten Schlüssel.
RSAKeyView_Honest_Step4=Schritt 4: Geben Sie eine Nachricht unten ein und verschlüsseln Sie sie mit dem öffentlichen Schlüssel.
RSAKeyView_Honest_Step5=Schritt 5: Der Besitzer des privaten Schlüssels kann die Nachricht entschlüsseln, was man hier durch den "Entschlüsseln"-Knopf simulieren kann. Ein Angreifer kann diese Nachricht nicht entschlüsseln. Dazu müsste er das Modul N in seine Primfaktoren zerlegen, was aufgrund des hohen Rechenaufwands für große Bitlänge (1024 Bits oder mehr) derzeit nicht praktikabel ist.
RSAKeyView_Honest_Title=Nicht manipulierte Schlüsselerzeugung mit RSA
RSAKeyView_ID=Kryptosystem ID
RSAKeyView_in_decimal=(dezimal)
RSAKeyView_Index=Index
RSAKeyView_Invalid_E=Der Wert, die Sie für E eingegeben haben, ist kein gültige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_E_Coprime=E muss teilerfremd zu phi = (p - 1)*(q - 1) =
RSAKeyView_Invalid_E_Coprime2=\ sein.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_E_Size=E muss größer als 1 und kleiner als phi = (p - 1)*(q - 1) =
RSAKeyView_Invalid_E_Size2=\ sein.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_Equal=P und Q darf nicht gleich sein.
RSAKeyView_Invalid_ID=Der Wert, die Sie für die ID eingegeben haben, ist kein gültige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_Input=Ungülitge Eingabe
RSAKeyView_Invalid_Length=\ Bit lang sein.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_P=Der Wert, die Sie für P eingegeben haben, ist kein gültige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invaild_P_Prime=Die Zahl, die Sie für P eingegeben haben, ist nicht prim.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_P_Length=Die Zahl, die Sie für P eingegeben haben, muss
RSAKeyView_Invalid_Q=Der Wert, die Sie für Q eingegeben haben, ist kein gültige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_Q_Length=Die Zahl, die Sie für Q eingegeben haben, muss
RSAKeyView_Invalid_Q_Prime=Die Zahl, die Sie für Q eingegeben haben, ist nicht prim.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invaild_Seed=Der eingegebene Startwert ist keine gültige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Keygen=Schlüsselerzeugung
RSAKeyView_Method=Verfahren:
RSAKeyView_N=N = P * Q
RSAKeyView_N_Prime=N' (vorlÃ¤ufiger Modul)
RSAKeyView_P=P (Primzahl)
RSAKeyView_Plaintext=Ursprüngliche Nachricht (Klartext)
RSAKeyView_PRF=Angriff 2: Erzeugung von P durch eine Pseudozufallsfunktion
RSAKeyView_PRF_Step1=Schritt 1: In diesem Angriff wird das Kryptosystem kompromittiert, indem eine der Primzahlen durch eine pseudozufällige Funktion erzeugt wird. Diese Funktion bekommt zwei Eingabewerte: eine zu diesem Kryptosystem eindeutige ID und einen Index.
RSAKeyView_PRF_Step2=Schritt 2: Über die ID und den Index wird ein Hash gebildet, der benutzt wird, um die Primzahl P zu erzeugen. Der Index wird in dem Ablauf der Erzeugung pseudozufälliger Werte mehrmals inkrementiert. Die zweite Primzahl Q wird nicht manipuliert erzeugt.
RSAKeyView_PRF_Step3=Schritt 3: P mal Q ergibt den Modul N.
RSAKeyView_PRF_Step4=Schritt 4: Phi wird berechnet, der öffentliche Exponent E wird gewählt, und der private Exponent D wird berechnet, indem die multiplikative Inverse von E bezüglich Phi gefunden wird. E und N bilden den öffentlichen Schlüssel, und D und N bilden den privaten Schlüssel.
RSAKeyView_PRF_Step5=Schritt 5: Geben Sie eine Nachricht unten ein und verschlüsseln Sie diese mit dem öffentlichen Schlüssel.
RSAKeyView_PRF_Step6=Schritt 6: Für einen normalen Beobachter sollten die Schlüssel ausreichend zufällig scheinen. Der Angreifer hat dagegen die ID und die Funktion, kann den Index leicht finden, und kann damit die Primzahl P nachbilden. Mithilfe des öffentlichen Schlüssels kann der Angreifer den privaten Schlüssel wiederherstellen.
RSAKeyView_PRF_Title=Betrügerische Schlüsselerzeugung mit RSA: Pseudozufallsfunktion
RSAKeyView_PRG=Angriff 3: Erzeugung von P durch einen Pseudozufallsgenerator
RSAKeyView_PRG_Step1=Schritt 1: In diesem Angriff wird das Kryptosystem kompromittiert, indem eine der Primzahlen durch einen Pseudozufallsgenerator erzeugt wird. Dieser Generator benötigt einen Startwert, mit dem bei jeder Iteration ein neuer Startwert berechnet wird.
RSAKeyView_PRG_Step2=Schritt 2: Jede Iteration des Generators ergibt drei nutzbare Bits. Nach genug Iterationen können die gesammelte Bits benutzt werden, um eine prime Pseudozufallszahl P zu erzeugen. Die zweite Primzahl wird nicht manipuliert erzeugt. Achtung: diesem Ablauf könnte für lange Schlüssel mehrere Sekunden oder sogar Minuten brauchen\!
RSAKeyView_PRG_Step3=Schritt 3: P mal Q ergibt den Modul N.
RSAKeyView_PRG_Step4=Schritt 4: Phi wird berechnet, der öffentliche Exponent E wird gewählt, und der private Exponent D wird berechnet, indem die multiplikative Inverse von E bezüglich Phi gefunden wird. E und N bilden den öffentlichen Schlüssel, und D und N bilden den privaten Schlüssel.
RSAKeyView_PRG_Step5=Schritt 5: Geben Sie eine Nachricht unten ein und verschlüsseln Sie sie mit dem öffentlichen Schlüssel.
RSAKeyView_PRG_Step6=Schritt 6: Für einen normalen Beobachter sollten die Schlüssel ausreichend zufällig scheinen. Der Angreifer hat dagegen den ursprünglichen Startwert und den Generator, und kann damit die Primzahl P nachbilden. Mithilfe von dem öffentlichen Schlüssel kann der Angreifer den privaten Schlüssel wiederherstellen.
RSAKeyView_PRG_Title=Betrügerische Schlüsselerzeugung mit RSA: Pseudozufallsgenerator
RSAKeyView_Q=Q (Primzahl)
RSAKeyView_ResetE=Standard-E wiederherstellen
RSAKeyView_Reset_ID_Index=ID und Index zurücksetzen
RSAKeyView_Save=Öffentlichen Schlüssel und Geheimtext speichern
RSAKeyView_Seed=Zufälliger Startwert
RSAKeyView_Settings=Einstellungen
RSAKeyView_SETUP=Angriff 4: SETUP
RSAKeyView_SETUP_Step1=Schritt 1: Ein SETUP-Angriff (engl. "secretly embedded trapdoor with universal protection", d.h. ein geheim eingebauter, universal geschützter Falltürangriff) wird konstruiert, um verschlüsselte Daten aus einem Kryptosystem offenzulegen. In diesem Beispiel wird es angenommen, dass der Angreifer dieses Gerät kompromittiert hat, indem es seinen öffentlichen Schlüssel beinhaltet.
RSAKeyView_SETUP_Step2=Schritt 2: Die Primzahl P wird zufällig erzeugt und dann mit dem öffentlichen Schlüssel des Angreifers verschlüsselt. Ein vorlÃ¤ufiges Modul N' wird konstruiert, damit die obere Hälfte der Bits gleich dem verschlüsselten P und der Rest zufüllig ist. Die zweite Primzahl wird durch Division mittels der Gleichung P*Q + R = N' gerechnet, wo R der unbenutzte Rest ist. Achtung: dieser Ablauf könnte für lange Schlüsselgrößen mehrere Sekunden oder sogar Minuten brauchen\!
RSAKeyView_SETUP_Step3=Schritt 3: P mal Q ergibt den eigentlichen Modul N, was auch gleich N' - R ist. Beachten Sie, dass die obere Bithälfte von N gleich der oberen Bilthälfte von N' ist - Ausnahme: bei großen R können diese Bits sich um eins unterscheiden. Der Angreifer muss das später berücksichtigen.
RSAKeyView_SETUP_Step4=Schritt 4: Phi wird berechnet, der öffentliche Exponent E wird gewählt, und der private Exponent D wird berechnet, indem die multiplikative Inverse von E bezüglich Phi gefunden wird. E und N bilden den öffentlichen Schlüssel, und D und N bilden den privaten Schlüssel.
RSAKeyView_SETUP_Step5=Schritt 5: Geben Sie eine Nachricht unten ein und verschlüsseln Sie sie mit dem öffentlichen Schlüssel.
RSAKeyView_SETUP_Step6=Schritt 6: Für einen normalen Beobachter sollten die Schlüssel ausreichend zufällig scheinen. Der Angreifer weiß dagegen, dass der private Schlüssel tatsächlich in dem öffentlichen Schlüssel gespeichert wurde. Speichern Sie nun den öffentlichen Schlüssel und den Geheimtext, um sie in dem nächsten Tab weiter zu analysieren.
RSAKeyView_SETUP_Title=Betrügerische Schlüsselerzeugung mit RSA: SETUP-Angriff
RSAKeyView_Texts=Klar- und Geheimtexte
RSAKeyView_Title=Kleptographische Angriffe mit RSA
