#Eclipse modern messages class
Overview=Overview
StateKey=Set key pair
StateNewMsg=New message
StateSignMsg=Sign message
StateVerOMsg=Verify message
StateRedMsg=Redact message
StateVerRMsg=Verify redacted
DataBoxKey=Key material
DataBoxOrig=Signed message
DataBoxRed=Redacted message
SelectKeySize=Select a key size:
TakesLongTime=(takes a long time)
GenerateKey=Generate new key
Next=Next
NewMessage=New message
SetMessages=Set message's parts
AddMessagePart=Add another message part
PasteYour=Paste the content of message part number
PartHere=below:
ConfirmMessages=Confirm message parts
AddMessageButtonLabel=Add more message parts with this button.
SelectFixedParts=Set redaction policy for the message parts.
SelectPartsInfoText=Select which message parts should be redactable. If not marked as redactable they can not be deleted/redacted without invalidating the signature.
SignMessage=Sign message
VerifyMessage=Verify message
VerifyMessageInfoText=Try to modify the message, to check if it still verifies.
Message=Message part
Reset=Reset message parts to original contents
RedactMessages=Redact selected message parts
VerifyRedacted=Verify the signed redacted message
Fix=fix
Number=Number
Redact=Redact
Redactable=Redactable
ReturnButton=Return
Yes=Yes
No=No
IsVerified=Is verified
MessagePart=Message Part
Redacted=redacted
Help=Help
About=About
ViewKey=Key information
KeyLength=Key length
KeyType=Key type
KeyPair=Key pair
PrivateKey=Private key(secret)
PublicKey=Public Key
ProofPart=Proof
ViewMessage=Original signed message
ViewRedacted=View signed redacted message
TextSetKey=In the first step you can chose some algorithm settings. First of all, a algorithm variant needs to be selected. You can find more about the different variants in the online help. Then also a key size needs to be selected. While smaller key sizes will lead to faster execution, larger key sizes are safer. Currently a key size of at least 2048 is recommended in order to be secure. For some algorithms also some additional configuration need to be made. Instead of generating a new key, you can also load an existing one. After the generation of the key you can also export the key.
TextSetMessage=In this step you can determine the message parts to sign. You can eather write directly in the text boxes or paste the content there. For each part, which should be redacted all or nothing a separate part needs to be used. In this step it is also possible to load a signed message instead.
TextSignMessage=Here you can select which message parts should be redactable. There are also schemes, which do not fulfill the property "disclosure control" and therewith every message part is redactable. A third party is then allowed to remove redactable parts, without invalidating the document\'s signature. You can also load or save generated signed messages.
TextVerifyMessage=In the verify message step, the signed message from the last step is validated. As all schemes are consistent, this verification will always be successful, if you did not import a signature, which was created with another key. You can try, to export the signature here, create a new key and then import the signature again in the new message or sign message step and see what happens then.
TextRedact=In this step you can select which of the redactable message parts should be redacted. By pressing the button to redact, the selected parts will be removed from the signature. For this operation only the public key of the previous generated key pair is used, as redacting is a public operation.
TextVerifyRedacted=If you selected message parts for a redaction in the previous step, those were removed. Beside seeing this result you can also see, whether the not redacted message parts do still validate under the redacted signature or not. You save this redacted message and/or continue with the redact message step again. The redacted message can also be imported as signed message in the new message or the sign message step!
TextViewKey=Some information about the cryptographic keys used are printed, including the type of the key, its size and the encoded form of the private- and public-key.
TextViewMessage=Here the original message parts (including all already redacted parts) can be inspected. You can also see, whether the respective part is redactable or not. Note that this output was saved right after the signing and is not reconstructed from the redacted message, as this is not possible. You can save the original message and/or return to the last step.
TextViewRedacted=Here the current message is displayed. You can also see, whether the respective part is redactable or not. Besides that you can save the redacted message. This saved redacted message can also be imported as signed message in the new message or sign message step. Otherwise you can return to the previous step.

AlgorithmSettings=Algorithm settings
SelectAlgorithmVariant=Select an algorithm variant:
ContinueWithRedacting=Continue with redacting

LoadKey=Load key
SaveKey=Save key
LoadSign=Load signed message
SaveSign=Save signed message
FailedToLoadKey=Failed to load key!
FailedToStoreKey=Failed to store key!
FailedToLoadSign=Failed to load signature!
FailedToStoreSign=Failed to store signature!
ErrorLoadingKey=There was an error while trying to load the key. Please try again.
InvalidKey=The given input is no valid key or is not supported by this visualisation.
ErrorLoadingSign=There was an error while trying to load the signature. Please try again.
ErrorStoringSign=There was an error while trying to store the message. Please try again.
InvalidSign=The given input is no valid signature or does not match the current key. Try to load a signature which was created for the chosen key.
ErrorStoringKey=There was an error while trying to store the key. Please try again.
LoadSave=Import/Export
Load=Load
Save=Save

SelectHashMethod=Select a hash algorithm:
SelectAccumulator=Select an accumulator:
SelectUnderlayingSignatureScheme=Select an underlying signature scheme:
SelectMaxMessageParts=Select a maximum of supported message parts:


Title=Redactable Signature Schemes
Description=Digital signature schemes are used to provide data integrity and data origin authentication for a signed message. A redactable signature scheme enables the attestation of a message in such a way that, if certain parts of the signed message (known as fields) are redacted (erased, blanked out or permanently removed), the attestation of the redacted message with respect to its integrity and origin authentication can still be verified. More precisely, upon signing a message, the signer knowing the private signature key can define which parts of the message can later be redacted (in the sense of ISO/IEC 27038) by any entity only knowing the message, the signature, and the signer\u2019s redaction key. Any other modification of the signed message (e.g. redaction of other message parts or insertion/ modification of any parts) invalidates the attestation given by the signature.